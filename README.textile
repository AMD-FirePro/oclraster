*Flexible OpenCL Rasterizer*

This is the source code to my bachelor's thesis "Flexible OpenCL Rasterizer". The intension is to write a fully functional and programmable software rasterizer in OpenCL.
TODO: abstract

Note: this is a partial "fork" of "a2elight":https://github.com/a2flo/a2elight (initialization, core, event and initial OpenCL/CUDA functionality)

*Software Requirements and Important Information:*
* on Windows:
** if you have an ATI/AMD GPU/CPU or an Intel CPU: please install the "Intel OpenCL SDK for Windows (64-bit)":http://software.intel.com/en-us/vcsource/tools/opencl-sdk
** make sure to select the correct opencl platform in config.xml
* on OS X:
** please install the "latest XQuartz":http://xquartz.macosforge.org
** OpenCL on 10.7.5 and 10.8.2 on non-CPU devices is broken, please use a CPU device for now or use an earlier version of OS X (or 10.8.3+)
** -if you have a Nvidia GPU, you can also use "CUDA":https://developer.nvidia.com/cuda-downloads (set the opencl platform value to "cuda")- currently defunct

*Requirements:*
* Windows: NT 6.0+ x86 (Vista/7/8/2008/2008R2/2012), NT 5.1/5.2 x86 (XP/2003) support is uncertain
* OS X: 10.7+
* Linux: any x64 distribution that supports the AMD, Intel or Nvidia OpenCL SDK/drivers
* OpenGL 3.2+ and OpenCL 1.1+ capable GPU/CPU and platform (GeForce 400+, Radeon HD5+, Core2+, Athlon64+?)
* OpenCL extension support for:
** cl_khr_global_int32_base_atomics
** cl_khr_global_int32_extended_atomics
** cl_khr_local_int32_base_atomics
** cl_khr_local_int32_extended_atomics
** cl_khr_gl_sharing/cl_APPLE_gl_sharing
* 1 GB RAM minimum, 2 GB RAM are recommended
* 256 MB VRAM minimum, 1 GB VRAM are recommended

*Build Instructions:*
TODO / gist (for mingw and linux):
* install all necessary libraries (-> Credits; freetype2 and a2elight are not required)
* ./premake.sh
* make
* there is a install script located in lib/ which should be executed from that folder (will install to /usr/local/)

for OS X:
* install Xquartz, SDL2 and SDL2_image
* compile oclraster.xcodeproj
* install/symlink oclraster .dylib and lib folder to /usr/local/{lib,include} resp.
* compile any samples you like

*Credits:*
* https://github.com/a2flo/a2elight / a2elight
* http://www.libsdl.org / SDL2 and SDL2_image
* http://www.libpng.org / libpng, http://zlib.net / zlib
* http://www.xmlsoft.org / libxml2
* http://www.industriousone.com/premake / premake4
* http://mingw-w64.sourceforge.net / MinGW-w64/MSYS environment
* http://www.freetype.org / FreeType2
* http://www.dejavu-fonts.org / Bitstream DejaVu Fonts
* clang/libc++ (http://www.llvm.org)
* Khronos (http://www.khronos.org) / Nvidia / AMD / Apple / Intel (OpenGL/OpenCL)
* CUDA (http://www.nvidia.com)

*Papers:*
TODO: all papers
* "3D Rasterization: A Bridge between Rasterization and Ray Casting":http://cg.ibds.kit.edu/publications/p2012/3dr/gi2012.pdf
* "High-Performance Software Rasterization on GPUs":http://research.nvidia.com/sites/default/files/publications/laine2011hpg_paper.pdf

*Screenshots:*
progress as of 2013/02/21, running on a CPU in OS X and on a dual-core ARM CPU in iOS:
!https://dl.dropbox.com/u/1004620/osx_blender_monkey_1.png(subdivided blender monkey with parallax mapping)!
!https://dl.dropbox.com/u/1004620/osx_blender_monkey_2.png(subdivided blender monkey with parallax mapping)!
!https://dl.dropbox.com/u/1004620/ios_blender_monkey.png(note: framebuffer is upscaled by 2x and there are lots of issues with OpenCL on iOS -> defect depth testing)!
progress as of 2013/01/19, running on a GPU in OS X and inside a Window VM on a CPU:
!https://dl.dropbox.com/u/1004620/Screen%20Shot%202013-01-19%20at%2012.04.45%20PM.png(moar bunnies)!
!https://dl.dropbox.com/u/1004620/Screen%20Shot%202013-01-19%20at%2012.08.39%20PM.png(bunny on windows)!
progress as of 2012/12/06, running on the CPU:
!https://dl.dropbox.com/u/1004620/Screen%20Shot%202012-12-06%20at%2010.40.05%20AM.png(a bunny of course)!
